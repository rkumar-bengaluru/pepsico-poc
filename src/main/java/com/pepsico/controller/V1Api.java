/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.pepsico.controller;

import com.pepsico.model.CreateMenu;
import com.pepsico.model.CreateMenuItem;
import com.pepsico.model.Menu;
import com.pepsico.model.MenuItem;
import com.pepsico.model.ModelApiResponse;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-12-09T11:41:14.532834100+05:30[Asia/Calcutta]")
@Validated
@Tag(name = "v1", description = "the v1 API")
public interface V1Api {

    default V1ApiDelegate getDelegate() {
        return new V1ApiDelegate() {};
    }

    /**
     * POST /v1/menus : Adds a new menu to the given customer
     * Adds a new menu to the given customer
     *
     * @param customerId specific customerId that the menu belongs to (required)
     * @param createMenu  (optional)
     * @return successful operation (status code 200)
     *         or Invalid customerId or menu value (status code 400)
     *         or Access token is missing or invalid (status code 401)
     *         or No customer exists for the given customerId (status code 404)
     */
    @Operation(description = "Adds a new menu to the given customer", method = "createMenu", 
    summary = "Adds a new menu to the given customer",
        tags={ "menus", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation"),
        @ApiResponse(responseCode = "400", description = "Invalid customerId or menu value"),
        @ApiResponse(responseCode = "401", description = "Access token is missing or invalid"),
        @ApiResponse(responseCode = "404", description = "No customer exists for the given customerId") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/menus",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<String> createMenu(@Parameter(description = "specific customerId that the menu belongs to", required = true) @Valid @RequestParam(value = "customerId", required = true) String customerId,@Parameter(description = "") @Valid @RequestBody(required = false) CreateMenu createMenu) {
        return getDelegate().createMenu(customerId, createMenu);
    }


    /**
     * POST /v1/menuItems : Adds a new menuItem to the given Menu
     * Adds a new menuItem to the given Menu
     *
     * @param menuId specific menu id that the menuitem belongs to (required)
     * @param createMenuItem MenuItem object that needs to be added to the menu (optional)
     * @return successful operation (status code 200)
     *         or Invalid menuId or menuItem value (status code 400)
     *         or Access token is missing or invalid (status code 401)
     *         or No menu exists for the given menuId (status code 404)
     */
    @Operation(description = "Adds a new menuItem to the given Menu", operationId = "createMenuItem", summary = "Adds a new menuItem to the given Menu", tags={ "menuItems", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation"),
        @ApiResponse(responseCode = "400", description = "Invalid menuId or menuItem value"),
        @ApiResponse(responseCode = "401", description = "Access token is missing or invalid"),
        @ApiResponse(responseCode = "404", description = "No menu exists for the given menuId") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/menuItems",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<String> createMenuItem( @Parameter(description = "specific menu id that the menuitem belongs to", required = true) @Valid @RequestParam(value = "menuId", required = true) String menuId,@Parameter(description = "MenuItem object that needs to be added to the menu") @Valid @RequestBody(required = false) CreateMenuItem createMenuItem) {
        return getDelegate().createMenuItem(menuId, createMenuItem);
    }


    /**
     * DELETE /v1/menus/{menuId} : Delete a menu by ID
     * Deletes the specified menu using its ID.
     *
     * @param menuId ID of menu to be deleted (required)
     * @return No Content. The item was successfully deleted. (status code 204)
     *         or Not Found. The item with the specified ID was not found. (status code 404)
     *         or Internal Server Error. An error occurred during the operation. (status code 500)
     */
    @Operation(description = "Delete a menu by ID", operationId = "deleteMenuById", summary = "Deletes the specified menu using its ID.", tags={ "menus", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "No Content. The item was successfully deleted."),
        @ApiResponse(responseCode = "404", description = "Not Found. The item with the specified ID was not found."),
        @ApiResponse(responseCode = "500", description = "Internal Server Error. An error occurred during the operation.") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/menus/{menuId}"
    )
    default ResponseEntity<Void> deleteMenuById( @Parameter(description = "ID of menu to be deleted", required = true) @PathVariable("menuId") String menuId) {
        return getDelegate().deleteMenuById(menuId);
    }


    /**
     * DELETE /v1/menuItems/{menuItemId} : Delete a minuItem by ID
     * Deletes the specified menuItem using its ID.
     *
     * @param menuItemId ID of menuItem to be deleted (required)
     * @return No Content. The item was successfully deleted. (status code 204)
     *         or Not Found. The item with the specified ID was not found. (status code 404)
     *         or Internal Server Error. An error occurred during the operation. (status code 500)
     */
    @Operation(description = "Delete a minuItem by ID", operationId = "deleteMenuItemById", summary = "Deletes the specified menuItem using its ID.", tags={ "menuItems", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "No Content. The item was successfully deleted."),
        @ApiResponse(responseCode = "404", description = "Not Found. The item with the specified ID was not found."),
        @ApiResponse(responseCode = "500", description = "Internal Server Error. An error occurred during the operation.") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/menuItems/{menuItemId}"
    )
    default ResponseEntity<Void> deleteMenuItemById( @Parameter(description = "ID of menuItem to be deleted", required = true) @PathVariable("menuItemId") String menuItemId) {
        return getDelegate().deleteMenuItemById(menuItemId);
    }


    /**
     * GET /v1/menus/{menuId} : Find menu by ID
     * Returns a single menu
     *
     * @param menuId ID of menu to return (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Menu not found (status code 404)
     */
    @Operation(description = "Find menu by ID", operationId = "getMenuById", summary = "Returns a single menu", tags={ "menus", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation"),
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        @ApiResponse(responseCode = "404", description = "Menu not found") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/menus/{menuId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Menu> getMenuById( @Parameter(description = "ID of menu to return", required = true) @PathVariable("menuId") String menuId) {
        return getDelegate().getMenuById(menuId);
    }


    /**
     * GET /v1/menuItems/{menuItemId} : Find menu item by ID
     * Returns a single menu item
     *
     * @param menuItemId ID of menuItem to return (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Menu not found (status code 404)
     */
    @Operation(description = "Find menu item by ID", operationId = "getMenuItemById", summary = "Returns a single menu item", tags={ "menuItems", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation"),
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        @ApiResponse(responseCode = "404", description = "Menu not found") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/menuItems/{menuItemId}",
        produces = { "application/json" }
    )
    default ResponseEntity<MenuItem> getMenuItemById( @Parameter(description = "ID of menuItem to return", required = true) @PathVariable("menuItemId") String menuItemId) {
        return getDelegate().getMenuItemById(menuItemId);
    }


    /**
     * GET /v1/menuItems : Get menuItems for a given menu
     * Get menu items for a given menu
     *
     * @param menuId specific menu id that the menuitems belongs to (required)
     * @return successful operation (status code 200)
     *         or Invalid menuId value (status code 400)
     *         or Access token is missing or invalid (status code 401)
     *         or No menuitems found for the given menuId (status code 404)
     */
    @Operation(description = "Get menuItems for a given menu", operationId  = "getMenuItems", summary = "Get menu items for a given menu", tags={ "menuItems", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation"),
        @ApiResponse(responseCode = "400", description = "Invalid menuId value"),
        @ApiResponse(responseCode = "401", description = "Access token is missing or invalid"),
        @ApiResponse(responseCode = "404", description = "No menuitems found for the given menuId") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/menuItems",
        produces = { "application/json" }
    )
    default ResponseEntity<List<MenuItem>> getMenuItems( @Parameter(description = "specific menu id that the menuitems belongs to", required = true) @Valid @RequestParam(value = "menuId", required = true) String menuId) {
        return getDelegate().getMenuItems(menuId);
    }


    /**
     * GET /v1/menus : Get menus for a given customer
     * Get menus for a given customer
     *
     * @param customerId specific customer id that the menu belongs to (required)
     * @return successful operation (status code 200)
     *         or Invalid customerId value (status code 400)
     *         or Access token is missing or invalid (status code 401)
     *         or No menu found for the given customerId (status code 404)
     */
    @Operation(description = "Get menus for a given customer", operationId = "getMenus", summary = "Get menus for a given customer", tags={ "menus", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation"),
        @ApiResponse(responseCode = "400", description = "Invalid customerId value"),
        @ApiResponse(responseCode = "401", description = "Access token is missing or invalid"),
        @ApiResponse(responseCode = "404", description = "No menu found for the given customerId") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/menus",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Menu>> getMenus( @Parameter(description = "specific customer id that the menu belongs to", required = true) @Valid @RequestParam(value = "customerId", required = true) String customerId) {
        return getDelegate().getMenus(customerId);
    }


    /**
     * POST /v1/menuItems/{menuItemId}/uploadImage : uploads an image for the Menu Item
     *
     * @param menuItemId ID of menuItem to update (required)
     * @param body  (optional)
     * @return successful operation (status code 200)
     */
    @Operation(description = "uploads an image for the Menu Item", operationId = "uploadFile", summary = "", tags={ "menuItems", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/menuItems/{menuItemId}/uploadImage",
        produces = { "application/json" },
        consumes = { "application/octet-stream" }
    )
    default ResponseEntity<ModelApiResponse> uploadFile(@Parameter(description = "ID of menuItem to update", required = true) @PathVariable("menuItemId") Long menuItemId,@Parameter(description = "") @Valid @RequestBody(required = false) org.springframework.core.io.Resource body) {
        // return getDelegate().uploadFile(menuItemId, body);
        return null;
    }


    /**
     * POST /v1/menus/{menuId}/uploadImage : uploads an image for the overall Menu
     *
     * @param menuId ID of menu to update (required)
     * @param body  (optional)
     * @return successful operation (status code 200)
     */
    @Operation(description = "uploads an image for the overall Menu", operationId  = "uploadMenuFile", summary = "", tags={ "menus", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/menus/{menuId}/uploadImage",
        produces = { "application/json" },
        consumes = { "application/octet-stream" }
    )
    default ResponseEntity<ModelApiResponse> uploadMenuFile( @Parameter(description = "ID of menu to update", required = true) @PathVariable("menuId") String menuId,@Parameter(description  = "") @Valid @RequestBody(required = false) org.springframework.core.io.Resource body) {
        // return getDelegate().uploadMenuFile(menuId, body);
        return null;
    }

}
